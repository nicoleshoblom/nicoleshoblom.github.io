---
import BlogPostLayout from '../../layouts/BlogPostLayoutVideo.astro';
const captions = [
    "I always think of this song by Lupe Fiasco when using Git. In this post we won't 'kick push'. Instead we'll 'git push'."
];
export const title = "Git Basics for a Personal Project Website"
export const date = "April 8, 2025"
const location = "Seoul, South Korea"
const images = Object.values(import.meta.glob('../../assets/gitpost/*.webp', { eager: true}));
const videoIndex = 0; // Index of the video in the images array
---
<BlogPostLayout
    captions={captions}, 
    title={title},
    date={date},
    location={location},
    images={images}
    videoIndex={videoIndex}
>
<p class="text"> 
    When using Git I always think of the song "Kick, Push" by Lupe Fiasco, but in this post we will <code>git push</code> ;). If you want to make a personal website while getting some front end coding skills, learning Git is essential. So let's get started!
    
    <!-- Git can be be useful for even non-technical projects, like writing a book because Git is a version control tool. What is version control? Essentially, its keeping track of changes made to files so that an individual or team can revert to past versions if necessary. Put another way, no one needs to fear making changes to files! And there doesn’t need to be separate files for different versions! -->
    <span></span>
    First sign up to make a free account with <a href="https://github.com/">Github</a>. Git can be used without a Github account, but for building a personal website from scratch (i.e., without Wix, Wordpress, Squarespace, etc.) it's absolutely necessary. Additionally, pushing your work to a remote Github server acts as a backup in case anything should happen to you local computer!
    <span></span>
    Next you will need to install Git on your computer, which is also free. Unfortunately for Windows users, this is where my post will be more helpful for Mac users. If on Windows or Linux please refer <a href="https://github.com/git-guides/install-git">here</a> for more instructions. So, if you have a Mac, I recommend installing Git via Homebrew, which is also free and also requires installation. To install Homebrew first search for the Terminal application and open a Terminal window. You will see a command prompt that looks like this.
<pre class="code-block">
<code>
nicole@Nicoles-MacBook-Pro ~ %
</code>
</pre>
    If you haven't installed Homebrew yet, you can run the following command after the command prompt to do so. 
<pre class="code-block">
<code>
nicole@Nicoles-MacBook-Pro ~ % /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
</code>
</pre>
    The installer will list what will be installed and the new folders that will be created. Follow the prompt to press RETURN/ENTER to continue. Then after successful installation you'll see "Next steps" commands to add Homebrew to your <b>PATH</b>. Copy and paste the commands directly into your terminal. Now installation of Git is easy by running the following command.
<pre class="code-block">
<code>
brew install git
</code>
</pre>
    You can verify that Git installed by running <code>git --version</code>, and you should see something like <code>git version 2.39.5</code>. If you made it this far you've won half the Git battle.
    <span></span>
    Now let's do a toy example to give you an idea of how Git works. First, set up a global author name and email in Git by running the following commands. Replace "Your Name" and "Your Email" with your own name and email.
<pre class="code-block">
<code>
git config --global user.name "Your Name"
git config --global user.email "Your Email"
</code>
</pre>
    Next, search for the Finder app, open a new Finder window and create a new folder in Documents. Name the folder 'test'. Now in your Terminal window, enter the command <code>cd</code>, which stands for "change directory", to the folder you just made. For me it looks like:
<pre class="code-block">
<code>
cd /Users/nicole/Documents/test
</code>
</pre>
    The command prompt should now show your folder. For example, my command prompt now shows "test" at the end.
<pre class="code-block">
<code>
nicole@Nicoles-MacBook-Pro test %
</code>
</pre>
    Next initialize the folder as a git repository by running:
<pre class="code-block">
<code>
nicole@Nicoles-MacBook-Pro test % git init
</code>
</pre>
    If you get a message that "Terminal" would like to access files in your Documents folder, click OK. Open the test folder in Finder and on your keyboard hit <kbd>⌘ command</kbd> + <kbd>⇧ shift </kbd> + <kbd>.</kbd>. You should see a .git folder. Now create a README file and .gitignore file in your test folder by running the following commands in your terminal.
<pre class="code-block">
<code>
echo "# Test project" > README.md
touch .gitignore
</code>
</pre>
    Creating these files are Git best practices. The README.md file typically describes the repo and how others can get started with the repo. The .gitignore file is where you can list folders or files that you don't want Git to track.   Check that the README.md and .gitignore files are in your folder in Finder.
    <span></span>
    Now stage and commit all the changes you've made to the "test" folder by running the following commands.
<pre class="code-block">
<code>
git add .
git commit -m "Initial commit"
</code>
</pre>
    Next make sure you are logged into to your Github account and go to <a href=https://github.com/new>github.com/new</a> to create a new repository. Give the repository the same name as the folder you just created. Set the repository to be "Public", and make sure "Add a README file" is <b>not</b> checked, and that both ".gitignore template" and "License" are set to <b>None</b>. Then click "Create repository", which will redirect you to your newly created repository page. Scroll down to "...or push an existing repository from the command line" to see the commands that will sync your local folder with the remote Github repository. For me I am instructed to run:
<pre class="code-block">
<code>
git remote add origin https://github.com/lupefiasco42/test.git
git branch -M main
git push -u origin main
</code>
</pre>
    (Yes, I made a new github account with username, lupefiasco42, just for those post &#128514;) You will then be prompted for your Github username and password. Go ahead and input your Github username. You will then be prompted for your password. However, in August 2021 Github now requires you to input a Github personal access token for your password. To get your personal access token go to <a href="https://github.com">github.com</a>. Click on your profile photo in the top right hand corner, and select "Settings". Then in the left menu click on "Developer Settings". In the left menu of Developer Settings click on "Personal access tokens" and choose "Tokens (classic)". Click on "Generate new token" and choose "Generate new token (classic)". Provide a name for the token under <b>Note</b>, keep the default expiration date, and select all scopes. Then hit "Generate token", and copy the generated token. Go back to your terminal and paste the token in as the response to the password prompt. If you made it this far, then you've done your first <code>git push</code>! Congrats! You can now go back to Github.com and see that README.md and .gitignore show up on the repository page.
    <span></span>
    Now let's make a change to README.md by opening it in Mac's TextEdit application on your local computer. In TextEdit make a new line that says anything you want. I wrote "This is a toy example". Save the file with your new change and then close it. Now in your terminal you can run <code>git status</code> and you should see that your "README.md" file is listed under "Changes not staged for commit". So let's stage, commit, and push our recent changes to the remote github repo.
<pre class="code-block">
<code>
git add .
git commit -m "Update readme"
git push
</code>
</pre>
    Note that <code>git add .</code> stages all modified or new files in your local git folder, but you can choose to stage only certain files. You can now refresh the Github.com repo page and see that README.md on the remote repo has been updated.
<span></span>
    OK, let's make some more changes to README.md. Reopen README.md in TextEdit, and add a dollar sign after every word in the sentence you made previously, then save and close the file. The second line in my readme file looks like this now: "This $ is $ a $ toy $ example $". Now let's pretend you've decided you don't want to have these dollar signs, and it would be too cumbersome to remove them one by one. Whatever can you do??? Git to the rescue! Run the following command in your terminal.
<pre class="code-block">
<code>
git checkout -- README.md
</code>
</pre>
    Reopen the README.md file to see that all the dollar signs are gone because the previous command reverted the readme file to the version you pushed with your last commit.
    <span></span>
    To my readers - if you can stage, commit, push, and revert using Git, then you've taken a big step to building your personal website from scratch. Muchas gracias for reading my post and I hope it was helpful. Feel free to email me if you run into any trouble. Also, please stay tuned for sequential posts on using Visual Studio Code, Astro web framework, and Github Pages all for the purposes of building a personal website. 잘가요! Goodbye!
<span class="end"></span>
</p>
</BlogPostLayout>
<style>
    span{
        display: block;
        height: 1.05rem;
    }
    .end{
        height:10px;
    }
    .code-block {
    background-color: lightgray; /* Light gray background */
    border: 1px solid #ddd; /* Border around the code block */
    border-radius: 5px; /* Rounded corners */
    padding: 0px; /* Padding inside the code block */
    font-family: 'Courier New', Courier, monospace; /* Monospace font for code */
    font-size: 12px; /* Font size */
    overflow-x: auto; /* Horizontal scrolling for long lines */
    align-items: center;
    }
    code{
        font-family: 'Courier New', Courier, monospace; /* Monospace font for code */
        font-size: 14px; /* Font size */
        background-color: lightgray; /* Light gray background */
        border: 1px solid #ddd; /* Border around the code block */
        border-radius: 5px; /* Rounded corners */
        padding: 0px;
        margin: 0px;
    }
    @media (min-width: 768px) {
        .code-block {
            font-size: 14px;
        }

    }
    kbd {
        display: inline-block;
        padding: 4px 8px;
        font-family: 'Menlo', monospace;
        font-size: 0.9rem;
        background: #f2f2f2;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-shadow: inset 0 -1px 0 #bbb;
        margin: 0 2px;
    }
</style>