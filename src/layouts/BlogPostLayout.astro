---
import BaseLayout from '../layouts/BaseLayout.astro'
import { Image } from 'astro:assets';
const images = Object.values(import.meta.glob('../assets/afghanwomen/*.webp', { eager: true }));
const { frontmatter } = Astro.props;
---

<BaseLayout>
    <div class="blog-layout">
        <div class="carousel">
            <div class="carousel-track">
                {images.map((image, index) => (
                    <Image src={image.default} alt={`Image ${index + 1}`} class="carousel-image" />
                ))}
            </div>
            <div class="carousel-controls">
                <button class="carousel-button prev">❮</button>
                <button class="carousel-button next">❯</button>
            </div>
        </div>
        <div class="content">
            <h1>{frontmatter.title}</h1>
            <h5>{frontmatter.date} | {frontmatter.location}</h5>
            <slot />
        </div>
    </div>

    <style>
        .blog-layout {
            display: flex;
            flex-direction: column; /* Default to column layout for mobile */
            gap: 0px;
            margin-top: 0px;
        }

        .carousel {
            position: relative;
            overflow: hidden;
            width: 100%;
            max-width: 800px;
            margin-top: 0px;
        }

        .carousel-track {
            display: flex;
            transition: transform 0.5s ease-in-out;
            width: calc(100% * var(--image-count)); /* Dynamically set width based on the number of images */
        }

        .carousel-image {
            flex-shrink: 0;
            width: 100%;
            height: auto;
            border-radius: 0px;
        }

        .carousel-controls {
            display: flex;
            justify-content: center;
            margin-top: 10px;
            gap: 10px;
        }

        .carousel-button {
            background-color: coral;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            border-radius: 5px;
        }

        .carousel-button:hover {
            background-color: darkorange;
        }
        
        .content{
            margin-left: 5px;
            margin-right: 5px;
            margin-top: 0px;
            padding-top:0;
            font-family: 'Open Sans', sans-serif;
        }
        .content h1 {
            font-size: 2rem;
            margin: 0;
            margin-top: 10px;
            text-align: center;
            padding-top: 0px;
            font-family: 'Poppins', sans-serif;
        }
        .content h5 {
            text-align: center;
            margin: 0px;
        }

        /* Desktop-specific layout */
        @media (min-width: 768px) {
            .blog-layout {
                flex-direction: row; /* Arrange carousel and content side by side */
                align-items: flex-start;
                height: auto;
            }

            .carousel {
                flex: 2; /* Allow the carousel to take up space on the left */
                max-width: 50%; /* Limit the carousel width */
                margin-left: 9px; /* Remove auto margin for side-by-side layout */
            }

            .content {
                flex: 2; /* Allow the content to take up more space on the right */
                padding-left: 10px; /* Add spacing between the carousel and content */
                margin-right: 5px;
                margin-top: 0px;
                padding-top: 0;
            }

            .content h1 {
                margin-top: 0px;
            }

        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const track = document.querySelector('.carousel-track');
            const images = Array.from(track.children);
            const prevButton = document.querySelector('.carousel-button.prev');
            const nextButton = document.querySelector('.carousel-button.next');
            let currentIndex = 0;

            function updateCarousel() {
                const slideWidth = images[0].getBoundingClientRect().width;
                track.style.transform = `translateX(-${currentIndex * slideWidth}px)`;
            }

            nextButton.addEventListener('click', () => {
                currentIndex = (currentIndex + 1) % images.length;
                updateCarousel();
            });

            prevButton.addEventListener('click', () => {
                currentIndex = (currentIndex - 1 + images.length) % images.length;
                updateCarousel();
            });

            window.addEventListener('resize', updateCarousel);
            updateCarousel(); // Initialize carousel position
        });
    </script>
</BaseLayout>